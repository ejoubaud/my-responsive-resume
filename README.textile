h1. My Responsive Resume

My Responsive Resume is the easiest way to build an online, nice-looking and responsive resume to impress your next employer. It even generates a PDF for you.

Just fill a file with your informations, throw a couple of command lines, and you'll get a pretty resume static site ready to throw online.


h1. Manual

h2. Pre-requisites

You just need "Ruby":http://www.ruby-lang.org/en/downloads/ and "Bundler":http://gembundler.com/ installed to generate your site.

These are pretty common and useful tools, but if you don't have them already, just follow the links for instructions.

You also need a host Web server to deploy your resume to. My Responsive Resume generates only static pages, so really any server will do.

No need for it to run PHP, Ruby, Java or anything. You just drop the generated files and it's done.


h2. Get My Responsive Resume

Just "fork this repository":https://github.com/ejoubaud/my-responsive-resume/fork/ , and clone it on your computer.

Then go to your project folder and run the bundler install in a command line :

bc. cd /path/to/my-responsive-resume/
bundle install


h2. Edit your resume

You can edit your resume's information in @data/resume.yml@.

Just take example on the existing structure and *respect the indentation*!

The structure of this file should be pretty self-explanatory, but if you need a reference, see the FAQ below.


h2. Add a photo (optional)

Replace the photo file named @avatar.jpg@ in @source/img@ with your own photo, or just delete it.


h2. Test it

Run the Middleman server:

bc. bundle exec middleman

Then you should be able to see your resume in any browser by typing @http://localhost:4567@

If you change the Yaml data, you must stop the server and restart it to see the changes.

h2. Deploy

Build the static site with the following command in your project directory:

bc. bundle exec middleman build

Then just upload the content of the generated @build@ folder onto your Web host.


h1. FAQ

h2. Is it a good idea to publish my email and phone number on the Internet ?

Generally, it is not, because of spam bots crawling the Web looking for email addresses to send spam to.

But the data you provide in the _phone_ and _email_ field of @resume.yml@ are obfuscated both in the Web page and the generated PDF.

In the Web page, they are written using Javascript, so if the crawler doesn't process Javascript (they usually don't), it won't even know there's somehting here. In the PDF, it just inserts invisible characters between the letters, so the crawler harvests only a useless email address/phone number.

Of course a human harvester, or a new generation of crawlers, might still be able to fetch them. There is no 100% solution, this is just the safest solution we can provide.

So publish them at your own risk.

*NB:* There is no protection in the other fields than _phone_ end _email_, so do not give them in the text of the sections.

h2. I don't understand that @resume.yml@. How am I supposed to fill it ?

It uses a "Yaml":http://www.yaml.org/ syntax, which is easy to read and write for both humans and machines. Learn more about it on "its Wikipedia page":http://en.wikipedia.org/wiki/YAML

It relies on indentation (the number of whitespaces at the beginning of each) for its organization, so be careful about it and don't use tabulations.

Here is a description of the data structure :

* Your resume is divided into *sections*. Each section will be represented as a square on your resume.
** Each section has a key (the identifier, e.g. _experience_), a *title* (the display title, e.g. _Experience_) and a list of *points*.
** You can choose to exclude some sections in the PDF, by adding them a @remove_from_pdf: yes@ attribute
* *Points* are subdivisions of your section. Depending on your section, a point can be a training you made, a job you had, or a domain of skills you master.
** Each *point* must have a display *title*, and a *text*.
** Each *point* may have a *date*, and some additonal *data*.
*** Additional *data* are just informational content about your point (client, employer...) that comes with a label. In @Client: "My client"@, @Client@ is the label and @My client@ is the content. They will be displayed beneath your point's title to add additional informations about the point. They are optional.
** The points' *title*, *data* and *text* are compiled with "Textile":http://textile.thresholdstate.com/, so feel free to use links or lists.
* You can provide personal informations, such as your name and desired job (_title_ and _subtitle_, required), your current location, birth date, email and phone number (optional). Email and phone number are obfuscated for spam crawlers.
* You can provide a photography or avatar (optional), by placing an image file in the @source/img@ folder, and by mentioning its name in the @avatar:@ field (default name: @avatar.jpg@)

h2. Can I use any Textile tags ?

Yes and no.

The Web page should work fine with all Textile (at least all that is supported by the "RedCloth":http://redcloth.org/ library).

In the PDF, the only supported features are :

* Lists (ordered and unordered)
* Links (URL and anchor)
* Bold and italic

The reason is that Textile is meant to generate HTML, not PDF, so I had to write a quick and dirty Textile parser for "Prawn":http://prawn.majesticseacreature.com/ (the library that generates the PDF).

h2. PDF is a thing of the past. Can I remove it ?

Yes, there's an option for not generating the pdf: @do_not_generate_pdf: yes@.

That line is ready to be applied in @resume.yml@. Just uncomment it by removing the @# @ in front of it. The PDF will not be generated and the link will not be displayed.

h2. What technologies are used on this project ?

It runs on :

* "Middleman":http://middlemanapp.com/ for static site generation, embedding "Compass":http://compass-style.org/, "CoffeeScript":http://coffeescript.org/ , "Haml":http://haml.info/ , among other goodies
* "Yaml":http://www.yaml.org/ and "Textile":http://textile.thresholdstate.com/ to store your resume's informations
* A "fluid squares":http://fluidsquares.com/ layout
* "Prawn":http://prawn.majesticseacreature.com/ to generate the PDF.

Thanks to the teams of all these amazing open-source projects.

h2. Why use Textile instead of the more widespread Markdown ?

Some Yaml data needed to be included in the page without being wrapped with @<p>@ tags. Markdown doesnot allow that, whereas Textile does (easily). Anyway Markdown doesn't have any Prawn parser either.

Most common features (italic, bold, lists) either work the same in both languages, or are arguably simpler with Textile (links).





